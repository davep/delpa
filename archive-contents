(1
 (funhead .
          [(1 6)
           ((emacs
             (24)))
           "Insert my standard function headers" single
           ((:authors
             ("Dave Pearson" . "davep@davep.org"))
            (:maintainer "Dave Pearson" . "davep@davep.org")
            (:url . "https://github.com/davep/funhead.el"))])
 (wordcloud .
            [(1 3)
             ((cl-lib
               (0 5))
              (emacs
               (24 3)))
             "Generate a word cloud" single
             ((:authors
               ("Dave Pearson" . "davep@davep.org"))
              (:maintainer "Dave Pearson" . "davep@davep.org")
              (:url . "https://github.com/davep/wordcloud.el"))])
 (make-phony .
             [(1 1)
              ((emacs
                (24)))
              "Make a Makefile target PHONY" single
              ((:authors
                ("Dave Pearson" . "davep@davep.org"))
               (:maintainer "Dave Pearson" . "davep@davep.org")
               (:url . "https://github.com/davep/make-phony.el"))])
 (end-it .
         [(1 12)
          ((emacs
            (24)))
          "Add an \"ends here\" marker to a file" single
          ((:authors
            ("Dave Pearson" . "davep@davep.org"))
           (:maintainer "Dave Pearson" . "davep@davep.org")
           (:url . "https://github.com/davep/end-it.el"))])
 (requote .
          [(1 1)
           ((emacs
             (24)))
           "Toggle quotes around a string." single
           ((:authors
             ("Dave Pearson" . "davep@davep.org"))
            (:maintainer "Dave Pearson" . "davep@davep.org")
            (:url . "https://github.com/davep/requote.el"))])
 (commoji .
          [(1 7)
           ((emacs
             (24)))
           "Quickly insert a commit emoji" single
           ((:authors
             ("Dave Pearson" . "davep@davep.org"))
            (:maintainer "Dave Pearson" . "davep@davep.org")
            (:url . "https://github.com/davep/commoji.el"))])
 (highlight-chars .
                  [(0)
                   nil "Highlight specified sets of characters, including whitespace." single
                   ((:authors
                     ("Drew Adams"))
                    (:maintainer nil . "Drew Adams (concat \"drew.adams\" \"@\" \"oracle\" \".com\")")
                    (:url . "https://www.emacswiki.org/emacs/download/highlight-chars.el"))])
 (fasta .
        [(1 0)
         ((emacs
           (24)))
         "Mode for working with fasta files" single
         ((:authors
           ("Dave Pearson" . "davep@davep.org"))
          (:maintainer "Dave Pearson" . "davep@davep.org")
          (:url . "https://github.com/davep/fasta.el"))])
 (festival .
           [(1 7)
            nil "Emacs interface into festival." single
            ((:authors
              ("Dave Pearson" . "davep@davep.org"))
             (:maintainer "Dave Pearson" . "davep@davep.org")
             (:url . "https://github.com/davep/festival.el"))])
 (rate-sx .
          [(1 4)
           ((emacs
             (24 4)))
           "Show currency rates from rate.sx" single
           ((:authors
             ("Dave Pearson" . "davep@davep.org"))
            (:maintainer "Dave Pearson" . "davep@davep.org")
            (:url . "https://github.com/davep/rate-sx.el"))])
 (macinfo .
          [(0 1)
           ((cl-lib
             (0 5)))
           "Show information from a Mac's serial number" single
           ((:authors
             ("Dave Pearson" . "davep@davep.org"))
            (:maintainer "Dave Pearson" . "davep@davep.org")
            (:url . "https://github.com/davep/macinfo.el"))])
 (quiz .
       [(1 4)
        ((cl-lib
          (0 5))
         (emacs
          (25)))
        "Multiple choice quiz game" single
        ((:authors
          ("Dave Pearson" . "davep@davep.org"))
         (:maintainer "Dave Pearson" . "davep@davep.org")
         (:url . "https://github.com/davep/quiz.el"))])
 (graburl .
          [(1 0)
           nil "Tool to help me test url-retrieve-synchronously" single
           ((:authors
             ("Dave Pearson" . "davep@davep.org"))
            (:maintainer "Dave Pearson" . "davep@davep.org")
            (:url . "https://github.com/davep/graburl.el"))])
 (qrencode .
           [(1 0)
            ((emacs
              (24)))
            "QR code text with qrenco.de" single
            ((:authors
              ("Dave Pearson" . "davep@davep.org"))
             (:maintainer "Dave Pearson" . "davep@davep.org")
             (:url . "https://github.com/davep/qrencode.el"))])
 (expando .
          [(1 4)
           nil "Quickly expand macros for easy reading/checking" single
           ((:authors
             ("Dave Pearson" . "davep@davep.org"))
            (:maintainer "Dave Pearson" . "davep@davep.org")
            (:url . "https://github.com/davep/expando.el"))])
 (is-a .
       [(1 3)
        nil "Tools for testing the environment we're running in" single
        ((:authors
          ("Dave Pearson" . "davep@davep.org"))
         (:maintainer "Dave Pearson" . "davep@davep.org")
         (:url . "https://github.com/davep/is-a.el"))])
 (msig .
       [(1 0)
        nil "Tools for manipulating email/news signatures" single
        ((:authors
          ("Dave Pearson" . "davep@davep.org"))
         (:maintainer "Dave Pearson" . "davep@davep.org")
         (:url . "https://github.com/davep/msig.el"))])
 (smartsig .
           [(1 15)
            ((cl-lib
              (0 5)))
            "Smart signature selection based on message content." single
            ((:authors
              ("Dave Pearson" . "davep@davep.org"))
             (:maintainer "Dave Pearson" . "davep@davep.org")
             (:url . "https://github.com/davep/smartsig.el"))])
 (macdob .
         [(1 0)
          nil "Report a Mac's \"date of birth\"" single
          ((:authors
            ("Dave Pearson" . "davep@davep.org"))
           (:maintainer "Dave Pearson" . "davep@davep.org")
           (:url . "https://github.com/davep/macdob.el"))])
 (nuke-buffers .
               [(1 6)
                ((emacs
                  (25 1)))
                "Safely kill as many buffers as possible" single
                ((:authors
                  ("Dave Pearson" . "davep@davep.org"))
                 (:maintainer "Dave Pearson" . "davep@davep.org")
                 (:url . "https://github.com/davep/nuke-buffers.el"))])
 (setup-compile .
                [(1 6)
                 nil "Command for setting up a compile command." single
                 ((:authors
                   ("Dave Pearson" . "davep@davep.org"))
                  (:maintainer "Dave Pearson" . "davep@davep.org")
                  (:url . "https://github.com/davep/setup-compile.el"))])
 (ngn .
      [(1 6)
       ((cl-lib
         (0 5)))
       "Quickly insert a newsgroup name." single
       ((:authors
         ("Dave Pearson" . "davep@davep.org"))
        (:maintainer "Dave Pearson" . "davep@davep.org")
        (:url . "https://github.com/davep/ngn.el"))])
 (winsplit .
           [(1 1)
            nil "Simple commands for creating new windows" single
            ((:authors
              ("Dave Pearson" . "davep@davep.org"))
             (:maintainer "Dave Pearson" . "davep@davep.org")
             (:url . "https://github.com/davep/winsplit.el"))])
 (org-davep .
            [(1 0)
             nil "My own little additions to org-mode" single
             ((:authors
               ("Dave Pearson" . "davep@davep.org"))
              (:maintainer "Dave Pearson" . "davep@davep.org")
              (:url . "https://github.com/davep/org-davep.el"))])
 (icmp-info .
            [(2 1)
             ((cl-lib
               (0 5)))
             "ICMP information tool." single
             ((:authors
               ("Dave Pearson" . "davep@davep.org"))
              (:maintainer "Dave Pearson" . "davep@davep.org")
              (:url . "https://github.com/davep/icmp-info.el"))])
 (handyurl .
           [(2 1)
            ((cl-lib
              (0 5)))
            "Pop up a list of URLs and select for pasting." single
            ((:authors
              ("Dave Pearson" . "davep@davep.org"))
             (:maintainer "Dave Pearson" . "davep@davep.org")
             (:url . "https://github.com/davep/handyurl.el"))])
 (longmacs .
           [(1 4)
            ((bind-key
              (1 0)))
            "Make it a little harder to deny emacs is an OS" single
            ((:authors
              ("Dave Pearson" . "davep@davep.org"))
             (:maintainer "Dave Pearson" . "davep@davep.org")
             (:url . "https://github.com/davep/longmacs.el"))])
 (xbase .
        [(1 38)
         ((cl-lib
           (0 5)))
         "A mode for editing Xbase programs." single
         ((:authors
           ("Mike Romberg" . "romberg@fsl.noaa.gov"))
          (:maintainer "Mike Romberg" . "romberg@fsl.noaa.gov")
          (:url . "https://github.com/davep/xbase.el"))])
 (davep-org .
            [(2 0)
             nil "Tools for managing my web sites." single
             ((:authors
               ("Dave Pearson" . "davep@davep.org"))
              (:maintainer "Dave Pearson" . "davep@davep.org")
              (:url . "https://github.com/davep/davep-org.el"))])
 (constellations .
                 [(1 4)
                  nil "Constellation tools." single
                  ((:authors
                    ("Dave Pearson" . "davep@davep.org"))
                   (:maintainer "Dave Pearson" . "davep@davep.org")
                   (:url . "https://github.com/davep/constellations.el"))])
 (fscroll .
          [(1 2)
           nil "Make scroll-{up,down} go all the way." single
           ((:authors
             ("Dave Pearson" . "davep@davep.org"))
            (:maintainer "Dave Pearson" . "davep@davep.org")
            (:url . "https://github.com/davep/fscroll.el"))])
 (csrclr .
         [(1 3)
          nil "Set cursor colour depending on environment." single
          ((:authors
            ("Dave Pearson" . "davep@davep.org"))
           (:maintainer "Dave Pearson" . "davep@davep.org")
           (:url . "https://github.com/davep/csrclr.el"))])
 (webinfo .
          [(1 2)
           nil "Get header information about a web server." single
           ((:authors
             ("Dave Pearson" . "davep@davep.org"))
            (:maintainer "Dave Pearson" . "davep@davep.org")
            (:url . "https://github.com/davep/webinfo.el"))])
 (unbind .
         [(1 5)
          nil "Commands for unbinding things" single
          ((:authors
            ("Dave Pearson" . "davep@davep.org"))
           (:maintainer "Dave Pearson" . "davep@davep.org")
           (:url . "https://github.com/davep/unbind.el"))])
 (nukneval .
           [(1 2)
            ((cl-lib
              (0 5)))
            "Nuke and reevaluate an elisp buffer." single
            ((:authors
              ("Dave Pearson" . "davep@davep.org"))
             (:maintainer "Dave Pearson" . "davep@davep.org")
             (:url . "https://github.com/davep/nukneval.el"))])
 (itch .
       [(1 2)
        nil "Scratch buffer tools." single
        ((:authors
          ("Dave Pearson" . "davep@davep.org"))
         (:maintainer "Dave Pearson" . "davep@davep.org")
         (:url . "https://github.com/davep/itch.el"))])
 (insert .
         [(1 16)
          nil "Insert stuff." single
          ((:authors
            ("Dave Pearson" . "davep@davep.org"))
           (:maintainer "Dave Pearson" . "davep@davep.org")
           (:url . "https://github.com/davep/insert.el"))])
 (become .
         [(1 3)
          ((cl-lib
            (0 5)))
          "Tools for transforming a buffer." single
          ((:authors
            ("Dave Pearson" . "davep@davep.org"))
           (:maintainer "Dave Pearson" . "davep@davep.org")
           (:url . "https://github.com/davep/become.el"))])
 (moving .
         [(1 3)
          nil "Extra commands for moving about a buffer." single
          ((:authors
            ("Dave Pearson" . "davep@davep.org"))
           (:maintainer "Dave Pearson" . "davep@davep.org")
           (:url . "https://github.com/davep/moving.el"))]))

